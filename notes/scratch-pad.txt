// const { pathname } = useLocation();
  const rrNavigate = useNavigate();
  // const rrMatch = useMatch(pathname);

  // console.log(`x:${pathname.slice(0, pathname.lastIndexOf('/'))}:`);
  
  const handleButtonClick = (href: string) => {
    rrNavigate(href, { replace: true });
  };

<Button
key={i}
// variant={pathname.search(/\/\d/g) > -1 ? 'default' : 'link'}
// variant={ ? 'default' : 'link'}
onClick={() => handleButtonClick(v.href)}
className={twMerge(pathname === v.href ? 'cursor-context-menu' : 'cursor-pointer')}
// disabled={pathname === v.href}
>{v.route}<span className="sr-only">{`navigate ${v.route}`}</span></Button>


// =========================================================================
// Working custom NavLink, BUT isActive broken on pathname
import { NavLink } from "react-router-dom";
import { RouteItems } from "@/lib/types";
import { twMerge } from "tailwind-merge";

export default function NavDesktop({ routes }: { routes: RouteItems }) {

  const className = ({ isActive, isPending }: { isActive: boolean, isPending: boolean }): string => {
    console.log('isActive  :', isActive);
    console.log('isPending :', isPending);
    
    return twMerge(
      'h-10 px-4 py-2',
      'text-orange-400 underline-offset-8 hover:underline',
      'inline-flex items-center justify-center whitespace-nowrap',
      // 'rounded-md text-sm font-medium ring-offset-background transition-colors',
      // 'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',
      '',
      isActive && 'pointer-events-none underline',
      isPending && 'pointer-events-none opacity-50',
    )
  }

  return (
    <nav className="hidden sm:flex">
      {routes.map((v, i) => (i < 3 &&
        <NavLink
          key={i}
          to={v.href}
          className={className}
          end={false}
        >{v.route}</NavLink>
      ))}
      {/* <div className="underline"></div> */}
    </nav>
  );
}
// =========================================================================

// =========================================================================
// Original theme toggle menu - converted it to a button only
import { Moon, Sun } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useTheme } from "@/context/theme-provider";

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}


// =========================================================================
// Broken tabs

<Tabs defaultValue="info" className="mt-3">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger
              value="info"
              className={twMerge(
                activeTab.tabName === 'info'
                  ? activeTab.tabCSS
                  : 'text-gray-500 dark:text-gray-400',
                'font-bold')}
              onClick={() => setActiveTab(prevState => ({ ...prevState, tabName: 'info' }))}
            >Info</TabsTrigger>
            <TabsTrigger
              value="cast"
              className={twMerge(
                activeTab.tabName === 'cast'
                  ? activeTab.tabCSS
                  : 'text-gray-500 dark:text-gray-400',
                'font-bold')}
              onClick={() => setActiveTab(prevState => ({ ...prevState, tabName: 'cast' }))}
            >Cast</TabsTrigger>
            <TabsTrigger
              value="rating"
              className={twMerge(
                activeTab.tabName === 'rating'
                  ? activeTab.tabCSS
                  : 'text-gray-500 dark:text-gray-400',
                'font-bold')}
              onClick={() => setActiveTab(prevState => ({ ...prevState, tabName: 'rating' }))}
            >Rating</TabsTrigger>
          </TabsList>
          <TabsContent value="info"><MovieInfo movie={movie} /></TabsContent>
          <TabsContent value="cast"><MovieCast /></TabsContent>
          <TabsContent value="rating"><MovieRating /></TabsContent>
        </Tabs>

// Old context
export type StoreContextType = {
  route: number;
  routePage: number;
}

// Initialize context data
const contextData: StoreContextType = {
  route: 0,
  routePage: 1
};

export const context: React.Context<StoreContextType> = createContext<StoreContextType>(contextData);

/**
 * Context store wrapper for entire app used in index.js
 * @param {any} props Child components to be wrapped
 * @returns Returns a React Context Provider
 */
export default function StoreProvider({children}: React.PropsWithChildren<{}>) {
  const [state, dispatch] = useReducer(StoreReducer, contextData);
  return (
    <context.Provider value={[state, dispatch]}>
      {children}
    </context.Provider>
  );
};